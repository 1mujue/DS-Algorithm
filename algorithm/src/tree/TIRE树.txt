#include <stdio.h>
#include <ctype.h>` 
#include <stdlib.h>
#include <string.h>

#define N 100005

typedef struct TREE_NODE
{
    int nid;
    int ch;
    int endcnt;
    int son[26];
} Node;

Node pool[N * 26], root;
int ncnt;

Node newNode(char c)
{
    Node p;
    p.ch = c;
    p.endcnt = 0;
    for (int i = 0; i < 26; i++)
    {
        p.son[i] = -1;
    }    
    p.nid = ++ncnt;
    return pool[ncnt] = p;
}

int n;

char input[N];

void insert(char* str)
{
    int cur = root.nid;
    int len = strlen(str);
    for (int i = 0; i < len; i++)
    {
        int ch = str[i] - 'a';
        if (pool[cur].son[ch] == -1)
        {
            Node tmp = newNode(ch + 'a');
            pool[cur].son[ch] = tmp.nid;
        }
        cur = pool[cur].son[ch];
        if (i == len - 1)
        {
            pool[cur].endcnt++;
        }
    }
}


int query(char* str)
{
    int cur = root.nid;
    int len = strlen(str);
    for (int i = 0; i < len; i++)
    {
        int ch = str[i] - 'a';
        if (pool[cur].son[ch] == -1)
        {
            return -1;
        }
        cur = pool[cur].son[ch];
        if (i == len - 1)
        {
            if (!pool[cur].endcnt)
                return -1;
        }
    }
    return 1;
}


int main()
{
    root = newNode('$');
    scanf ("%d", &n);
    for (int t = 0; t < n; t ++)
    {
        scanf("%s", input);
        insert(input);
    }

    int tot = 0, lmax = - 1;
    for (int i = 1 ; i <= ncnt; i++)
    {
        if (pool[i].endcnt > 0)
        {
            tot++;
            if (pool[i].endcnt > lmax)
                lmax = pool[i].endcnt;
        }
    }

    printf("%d %d\n", tot, lmax);
    return 0;
}